// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// ui/components/.gitignore
// ui/index.html
// ui/main.vue
// ui/rest-api.js
// ui/script.js
// ui/style.css
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _uiComponentsGitignore = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func uiComponentsGitignoreBytes() ([]byte, error) {
	return bindataRead(
		_uiComponentsGitignore,
		"ui/components/.gitignore",
	)
}

func uiComponentsGitignore() (*asset, error) {
	bytes, err := uiComponentsGitignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ui/components/.gitignore", size: 0, mode: os.FileMode(420), modTime: time.Unix(1542051616, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _uiIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x90\xb1\x52\x03\x31\x0c\x44\x7b\xbe\x42\xa8\x26\xf1\xd0\x51\xd8\xd7\x00\x75\x52\xd0\x50\x1a\xdf\x06\x0b\x7c\xce\x8d\x25\x12\xee\xef\x19\xce\xc9\x40\x25\xef\xee\xec\xb3\x2d\x7f\xfb\xb4\x7b\x7c\x79\xdd\x3f\x53\xb6\xa9\x0c\x37\xbe\x0f\x22\x9f\x11\xc7\xdf\x03\x91\x9f\x60\x91\x52\x8e\x4d\x61\x81\xbf\xec\xb0\x79\x60\x72\x97\xd0\xc4\x0a\x86\xdd\x8c\xba\x8f\xaa\xf1\x1d\xde\x75\xeb\x5f\xb7\xc6\x09\x81\x4f\x82\xf3\x7c\x6c\xc6\x94\x8e\xd5\x50\x2d\xf0\x59\x46\xcb\x61\xc4\x49\x12\x36\xab\xb8\x23\xa9\x62\x12\xcb\x46\x53\x2c\x08\xf7\x7f\x37\x15\xa9\x9f\xd4\x50\x02\xab\x2d\x05\x9a\x01\x63\xb2\x65\x46\x60\xc3\xb7\xb9\xa4\xca\x34\x61\x94\x18\x58\x53\x03\x2a\x53\x6e\x38\x5c\x0a\xdb\x35\x5f\x69\xde\x5d\xbf\xe7\xdf\x8e\xe3\x72\x7d\x6b\x94\x3a\x78\xb7\x8e\xee\x68\x6a\x32\x1b\x69\x4b\x2b\x51\x66\xdb\x7e\x28\x0f\xde\x75\xd1\x51\x9d\xe0\x5d\x5f\xdd\x4f\x00\x00\x00\xff\xff\xf4\x76\xc9\xd8\x52\x01\x00\x00")

func uiIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_uiIndexHtml,
		"ui/index.html",
	)
}

func uiIndexHtml() (*asset, error) {
	bytes, err := uiIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ui/index.html", size: 338, mode: os.FileMode(420), modTime: time.Unix(1542051567, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _uiMainVue = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8c\x3d\x0a\x02\x31\x10\x85\xfb\x39\xc5\x73\x2b\xad\xc2\xb6\xee\x90\xda\x1b\x58\x07\x33\xb2\x42\x34\x61\x9c\x45\x21\xcc\xdd\xc5\x55\xb1\x7a\x3f\x7c\x7c\x6c\x72\x6d\x25\x99\x44\x02\x78\x1e\xe3\x41\x4a\xa9\xe8\x1d\x8f\xaa\x25\xc3\x7d\xc3\x61\x1e\x23\x71\xf8\x93\xc4\xf7\x93\x5e\x9a\x45\x92\x67\xab\x6a\xc8\x72\x4e\x4b\x31\x74\x02\x72\xb2\xb4\xdd\xad\x15\x50\xb1\x45\x6f\xdf\x81\x8f\x73\x8f\xe1\xf8\xce\x61\x3d\x7d\x22\xc0\xc9\x27\xe2\xf0\xb3\xbe\x02\x00\x00\xff\xff\x34\x09\x69\xa7\x95\x00\x00\x00")

func uiMainVueBytes() ([]byte, error) {
	return bindataRead(
		_uiMainVue,
		"ui/main.vue",
	)
}

func uiMainVue() (*asset, error) {
	bytes, err := uiMainVueBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ui/main.vue", size: 149, mode: os.FileMode(420), modTime: time.Unix(1542051590, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _uiRestApiJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\xd1\x6f\xdb\xb6\x13\x7e\xd7\x5f\x71\x15\x82\x42\xca\x4f\x91\xd0\x57\xfb\xe7\x66\x59\xe3\x26\x1b\x8a\x25\x48\x6c\xec\x21\x4d\x00\x46\x3a\x47\xea\x64\x52\xa5\xa8\x3a\x86\xad\xff\x7d\xe0\x91\xb4\x65\xcf\x31\x92\x15\x7b\xd8\x9a\x97\x48\xe4\x1d\x4f\xc7\xef\xbe\xef\x18\x7a\xd2\xf0\x54\x15\x82\xc3\x15\xd6\xea\xa4\x2a\x02\xe4\x59\x25\x0a\xae\x22\x10\x95\x36\xd4\x21\x2c\x3c\x00\x95\x17\x75\xec\x6c\x30\x80\x95\x1f\x2c\x97\xe0\x27\x7e\x18\x4b\xac\x4a\x96\x62\x90\x7c\x4e\x0e\x92\x08\x7c\x3f\xec\xbb\x75\x36\x12\x0c\x5c\x4c\xbd\x68\xd1\x6a\x7b\x92\xc0\x49\x59\x8a\x19\x34\x35\x7b\x40\x28\x38\x7c\x6d\xb0\xc1\x08\x84\xd4\x03\xa1\x72\x94\x40\x81\x6b\x98\xe5\x28\x11\x54\x8e\xf0\x8d\x95\x0d\x82\x98\x80\xaf\xe3\xfb\x50\xd4\x50\xf0\x54\x48\x89\xa9\xea\x79\x00\x13\x21\x21\x28\x51\xc1\x14\x55\x2e\x32\x1d\xe9\xc6\x3f\x1b\x8e\xfc\x08\xfc\xcb\x8b\x6b\xf3\x1c\xd3\xe3\x74\xf8\x69\x38\x1a\xea\xb7\xf3\xe1\xc9\x29\x19\x4e\x46\x1f\xce\xfd\xdb\x58\x62\xd6\xa4\x18\x78\x00\x00\x41\x15\x41\x1a\xc2\xe0\x3d\x04\xd5\x4d\x7a\x0b\x03\x78\x17\x46\x64\x59\xb4\x1e\x40\x68\x40\x32\xdb\xbd\x31\x1f\xd5\x4e\x16\xd4\xb8\x92\x42\x09\x35\xaf\xd0\xd9\xe2\xfb\x82\x67\x81\xf6\x26\x94\x5a\xaf\xf5\x9c\xef\x04\x55\x9a\x5f\x61\x5d\x09\x5e\xe3\x39\xe3\x59\x89\x12\x06\xb0\x2a\xd4\x2e\x7b\x90\x33\x99\x7d\x64\x45\x19\x81\x44\x5b\x31\x89\xaa\x91\x1c\x38\xce\xe0\x52\x8a\x69\x51\x63\x10\x48\xac\x45\xf9\x0d\xb5\xd7\x17\x4c\x15\x6d\xc8\x24\xae\x4d\x71\x8e\x2c\x43\x59\xc7\x0f\xa8\x02\xff\x83\xe0\x0a\xb9\x3a\x1a\xcd\x2b\xf4\xc3\x78\xca\x54\x9a\x07\xc9\x1d\xab\xaa\xb2\x48\x99\x4e\xe5\x73\xf2\xa5\x16\x3c\x38\xee\x1d\x2c\xfb\x61\x12\x52\x1c\x80\x63\x9d\x42\x4c\x16\x37\xd5\xa3\x29\x85\x8f\xca\x4e\x85\xb1\xca\x91\x07\xf7\x22\x9b\xaf\x53\x00\xf2\x4a\xcd\x67\x61\x00\xda\xda\xb7\x96\x62\x02\xc1\x1b\x6d\x16\x7f\xc0\xdb\xb7\xe0\xb6\x1b\xda\x8d\xe8\xec\x43\xe7\x8b\x65\x8d\x60\x77\xda\x31\xb4\xab\x5d\x13\xe2\x61\xdf\x6b\xfb\xde\x5f\x0a\x14\xd7\xc8\xb3\x2e\xdc\x7a\x1c\x98\xaa\x45\x50\x31\x95\x47\x60\x61\xda\x52\x88\xc5\x9b\xca\x13\x6c\xca\xe5\x7f\xb4\x70\xad\x90\xbb\xe0\xe6\x2e\xb9\x0d\xb5\x4a\x92\x83\x77\x7e\x18\x59\x04\xe2\x38\xee\xea\x25\x72\x93\x1b\x63\x9b\x0b\xbd\xdb\x4c\x7a\x2b\x04\xb7\x22\xb8\x8a\x46\x6b\x73\xe0\x24\x78\x0c\x5b\x4e\xd0\x83\x45\x1b\x76\x5c\xed\xbc\x41\x8f\x30\x33\x65\xa3\x89\x7d\x74\x35\xec\xb6\x81\x78\x53\x96\x2e\xe8\x66\x6e\xb6\x88\xd6\xa6\x99\x13\x6c\xf4\x87\x70\xe5\x02\x6f\x06\x03\x98\xb0\xb2\xc6\x95\x73\xef\x49\x67\xc3\x30\xad\xca\x3d\x25\xfe\xbd\x50\xf9\xcf\x44\xbf\xcd\x52\xbb\x79\x9d\xfd\x1a\x69\xaa\xbb\x07\x44\x49\xfd\xec\xc0\x6a\x93\xf0\x0c\x09\x74\xcf\xd1\xdf\x80\x01\xf8\x9a\xef\x49\x55\xb2\x82\xfb\x9a\x71\x9a\xc2\x44\xf8\x82\xd7\x8a\xf1\x14\xc5\x04\x3e\x0a\x39\x3d\x65\x8a\x85\xab\x45\xd3\xa6\x54\x45\xc5\xa4\x4a\x26\x42\x4e\x8f\x32\xa6\x18\xad\x26\x52\xef\x0a\x31\xbe\xfa\x74\x8d\x4c\xa6\xf9\x25\x93\x6c\x5a\x1b\x7d\xb9\x68\x1d\xb1\x26\x8f\x47\xb3\xd9\xec\x88\xa2\x36\xb2\x44\x9e\x8a\x0c\xb3\xfd\xb1\x2f\xee\x4d\x97\x58\x3c\x19\x54\xcb\xdc\x37\xfa\x32\x62\x86\x5f\xaf\x2f\x7e\x8b\x6b\x25\x0b\xfe\x50\x4c\xe6\x14\xd2\xb6\xb8\xb5\x46\x88\x06\xfb\x84\xb5\xd8\xc9\x7c\x87\x7e\x97\xf7\xb0\xd9\xa7\x7a\x94\x65\xf4\x1c\xa2\x5b\x4a\x13\x47\x92\xc3\x43\x0f\x0e\xe1\x5a\x6b\x9f\xc1\xd9\x70\x04\x12\xbf\x36\x58\x2b\x50\x82\x0e\x9c\x93\xcb\x5f\xb4\xc3\x4f\x95\x06\x19\x16\x66\x7f\x2d\xa5\x0d\x97\xfa\x8f\x98\x90\xdf\xd5\xf0\x7a\x04\x2b\xdd\x2b\xe1\xe2\x74\x17\x0b\x42\xb5\x75\x9b\x80\x73\xfb\x54\x02\x6a\x54\x20\x38\x45\xda\xb3\xd0\x6d\xec\x82\x0e\x47\x37\x52\x42\x1f\x7b\x33\x26\x33\x7a\xa5\x36\x14\xd2\x72\x83\x7a\x0d\x0b\x7b\x0e\xfc\x7f\x41\x48\xea\x1e\x49\xaa\x6d\xdf\xb7\x1e\x1c\x26\x3b\x94\xa2\x91\xe8\x08\xe4\x6c\x38\x0a\x9e\xd1\x02\xd7\xe5\xb5\x67\xee\x13\x6b\x08\xfa\x2d\xec\xf5\xe9\xfc\x4f\x82\x6f\x16\x2f\x0d\x94\x4b\xa7\xbf\xe5\x96\x8a\x5a\xc3\xe6\x2b\x9b\x07\x0d\xa8\x3c\x3c\xeb\x24\xd5\xa7\x17\x77\x60\x91\x3c\x66\x45\x59\xc2\x3d\x42\x86\x0a\xe5\xb4\xe0\x98\x01\x6b\x94\x98\x32\x55\xa4\xac\x2c\xe7\x10\xac\xbb\x42\x04\xdb\x4a\x8a\x60\x87\xfc\x37\xdd\x76\xaa\x38\xfc\x97\xd2\x8b\x8a\xdd\xe1\x97\x1e\x5b\x82\x99\x10\xcf\xa3\xd9\xaa\x67\xbb\xff\xed\xf6\x86\xd8\xc9\xba\xf1\x2b\xe9\x7e\x18\xd2\x8d\x37\x39\x37\xfe\x4e\xca\x8d\xff\x16\xe3\xcc\xb5\xe3\xf5\x98\xa1\x92\x58\x30\x3a\x55\x31\x33\x2f\x3c\x6c\x56\x57\xb9\x17\x9c\x37\xfa\xd2\xf7\xdf\xae\x82\xfb\xdf\xfc\x49\xf4\x09\x82\x0e\xf6\x7a\xfc\x42\xe4\xed\xd5\xf9\x25\xe7\xbc\xbe\x64\xbf\xf6\xdc\x1f\xa5\xe7\x52\xb5\xbb\x5d\x57\x4f\x7c\x5f\xdf\xa5\x5f\x69\x9e\xd5\x79\xa7\x22\x6b\x4a\x8c\xf1\xb1\x12\x52\xd5\xeb\x9f\x65\xfa\xde\x9f\x01\x00\x00\xff\xff\xa6\xfa\x76\x29\xfe\x12\x00\x00")

func uiRestApiJsBytes() ([]byte, error) {
	return bindataRead(
		_uiRestApiJs,
		"ui/rest-api.js",
	)
}

func uiRestApiJs() (*asset, error) {
	bytes, err := uiRestApiJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ui/rest-api.js", size: 4862, mode: os.FileMode(420), modTime: time.Unix(1542051591, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _uiScriptJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcd\x41\x6a\x85\x40\x0c\xc6\xf1\x7d\x4e\x11\xb2\x52\xa8\xba\x77\xb0\xe0\x15\xba\x70\x3f\xd6\x58\x03\xe3\x4c\x88\x63\xa5\x94\xde\xbd\x94\xea\x93\xb7\xcd\xef\x1f\x3e\x59\x35\x59\x46\x1a\xfd\xc8\xa1\x7a\x4f\xc6\x8d\xf1\x87\x6c\x99\x8d\x1c\x3c\xab\xa6\xf0\x35\x4b\x08\xe4\xe0\x92\x61\x67\x9c\x2d\xad\x48\x9f\x3b\xdf\x0f\xbd\xea\x79\xae\x9b\xd5\x4b\xac\xff\xf5\xe2\x37\xde\x72\xaf\xf2\x48\x8c\xb7\x5c\x79\x15\x72\x70\x48\x9c\xd2\x51\x7b\x15\xec\x30\xf2\x71\xb5\x05\x35\x54\x3a\xb8\x5d\x4f\x1f\x76\x2e\xbe\x01\x91\x43\x8b\xf4\xb7\x45\x2f\x80\x68\x1c\x27\xb6\x16\x17\xec\x5e\x71\x29\x7a\xd5\x12\x7e\x4a\x07\xbf\x01\x00\x00\xff\xff\xe8\xd9\x0b\x69\xef\x00\x00\x00")

func uiScriptJsBytes() ([]byte, error) {
	return bindataRead(
		_uiScriptJs,
		"ui/script.js",
	)
}

func uiScriptJs() (*asset, error) {
	bytes, err := uiScriptJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ui/script.js", size: 239, mode: os.FileMode(420), modTime: time.Unix(1542051445, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _uiStyleCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\xd0\x3b\x4e\xc4\x30\x10\xc6\xf1\xde\xa7\x98\x12\x24\x63\x4f\xd8\xf0\x50\x56\x08\xce\xc0\x0d\x1c\xe7\xe1\x59\x8d\x33\x91\xc7\x2b\x58\x10\x77\x47\x0b\x45\x28\xa8\xb6\xf8\x8a\x7f\xf3\x2b\xbe\x17\xca\xab\x94\x0a\xc7\xc2\x57\xa9\xd6\x55\x3b\xef\x27\x59\xaa\xba\x59\x64\xe6\x31\xac\xa4\x2e\x4a\xf6\x51\xf5\x79\x0a\x99\xf8\xf4\xf4\x2a\xbd\x54\xe9\x5a\x44\xdb\x22\x52\x0d\x4c\xd1\x3e\x20\x9e\xf7\x5b\xd7\x7b\xf3\x1f\x1c\x87\xe5\xa0\x2e\xb2\x1c\x87\x89\x43\x19\x7f\xe0\x70\x08\xef\x9e\xa9\x57\xbf\x48\xc9\x81\xe9\x63\xf4\x8f\x0e\x5d\xb3\xb5\xcb\xb4\xb8\xa8\x7a\x19\x9b\x89\x99\xe6\x12\xb2\x6f\xdc\xce\xe1\xd6\x7f\x58\xd3\xcb\x70\xb2\x90\x1a\x0b\xe9\xd6\x42\xda\x59\x48\xad\x85\x74\x67\x21\xdd\xc3\xa7\x01\x38\x9f\x72\xf3\x36\xd2\x9c\x6a\x07\x2d\xe2\xde\x7c\x99\xef\x00\x00\x00\xff\xff\xca\x58\xbb\x72\x3d\x01\x00\x00")

func uiStyleCssBytes() ([]byte, error) {
	return bindataRead(
		_uiStyleCss,
		"ui/style.css",
	)
}

func uiStyleCss() (*asset, error) {
	bytes, err := uiStyleCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ui/style.css", size: 317, mode: os.FileMode(420), modTime: time.Unix(1542051597, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"ui/components/.gitignore": uiComponentsGitignore,
	"ui/index.html":            uiIndexHtml,
	"ui/main.vue":              uiMainVue,
	"ui/rest-api.js":           uiRestApiJs,
	"ui/script.js":             uiScriptJs,
	"ui/style.css":             uiStyleCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"ui": &bintree{nil, map[string]*bintree{
		"components": &bintree{nil, map[string]*bintree{
			".gitignore": &bintree{uiComponentsGitignore, map[string]*bintree{}},
		}},
		"index.html":  &bintree{uiIndexHtml, map[string]*bintree{}},
		"main.vue":    &bintree{uiMainVue, map[string]*bintree{}},
		"rest-api.js": &bintree{uiRestApiJs, map[string]*bintree{}},
		"script.js":   &bintree{uiScriptJs, map[string]*bintree{}},
		"style.css":   &bintree{uiStyleCss, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
